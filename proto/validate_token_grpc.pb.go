// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: validate_token.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ValidateTokenService_Validate_FullMethodName = "/validate_token.ValidateTokenService/Validate"
	ValidateTokenService_InitAPI_FullMethodName  = "/validate_token.ValidateTokenService/InitAPI"
)

// ValidateTokenServiceClient is the client API for ValidateTokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ValidateTokenServiceClient interface {
	Validate(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error)
	InitAPI(ctx context.Context, in *InitAPIRequest, opts ...grpc.CallOption) (*InitAPIResponse, error)
}

type validateTokenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewValidateTokenServiceClient(cc grpc.ClientConnInterface) ValidateTokenServiceClient {
	return &validateTokenServiceClient{cc}
}

func (c *validateTokenServiceClient) Validate(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error) {
	out := new(ValidateTokenResponse)
	err := c.cc.Invoke(ctx, ValidateTokenService_Validate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validateTokenServiceClient) InitAPI(ctx context.Context, in *InitAPIRequest, opts ...grpc.CallOption) (*InitAPIResponse, error) {
	out := new(InitAPIResponse)
	err := c.cc.Invoke(ctx, ValidateTokenService_InitAPI_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ValidateTokenServiceServer is the server API for ValidateTokenService service.
// All implementations must embed UnimplementedValidateTokenServiceServer
// for forward compatibility
type ValidateTokenServiceServer interface {
	Validate(context.Context, *ValidateTokenRequest) (*ValidateTokenResponse, error)
	InitAPI(context.Context, *InitAPIRequest) (*InitAPIResponse, error)
	mustEmbedUnimplementedValidateTokenServiceServer()
}

// UnimplementedValidateTokenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedValidateTokenServiceServer struct {
}

func (UnimplementedValidateTokenServiceServer) Validate(context.Context, *ValidateTokenRequest) (*ValidateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedValidateTokenServiceServer) InitAPI(context.Context, *InitAPIRequest) (*InitAPIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitAPI not implemented")
}
func (UnimplementedValidateTokenServiceServer) mustEmbedUnimplementedValidateTokenServiceServer() {}

// UnsafeValidateTokenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ValidateTokenServiceServer will
// result in compilation errors.
type UnsafeValidateTokenServiceServer interface {
	mustEmbedUnimplementedValidateTokenServiceServer()
}

func RegisterValidateTokenServiceServer(s grpc.ServiceRegistrar, srv ValidateTokenServiceServer) {
	s.RegisterService(&ValidateTokenService_ServiceDesc, srv)
}

func _ValidateTokenService_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidateTokenServiceServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidateTokenService_Validate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidateTokenServiceServer).Validate(ctx, req.(*ValidateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidateTokenService_InitAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidateTokenServiceServer).InitAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidateTokenService_InitAPI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidateTokenServiceServer).InitAPI(ctx, req.(*InitAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ValidateTokenService_ServiceDesc is the grpc.ServiceDesc for ValidateTokenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ValidateTokenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "validate_token.ValidateTokenService",
	HandlerType: (*ValidateTokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Validate",
			Handler:    _ValidateTokenService_Validate_Handler,
		},
		{
			MethodName: "InitAPI",
			Handler:    _ValidateTokenService_InitAPI_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "validate_token.proto",
}
