// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entity "github.com/rahmatrdn/go-skeleton/internal/repository/mysql/entity"

	mysql "github.com/rahmatrdn/go-skeleton/internal/repository/mysql"
)

// WalletRepository is an autogenerated mock type for the WalletRepository type
type WalletRepository struct {
	mock.Mock
}

// Begin provides a mock function with given fields:
func (_m *WalletRepository) Begin() (mysql.TrxObj, error) {
	ret := _m.Called()

	var r0 mysql.TrxObj
	var r1 error
	if rf, ok := ret.Get(0).(func() (mysql.TrxObj, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() mysql.TrxObj); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mysql.TrxObj)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, dbTrx, wallet, nonZeroVal
func (_m *WalletRepository) Create(ctx context.Context, dbTrx mysql.TrxObj, wallet *entity.Wallet, nonZeroVal bool) error {
	ret := _m.Called(ctx, dbTrx, wallet, nonZeroVal)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, mysql.TrxObj, *entity.Wallet, bool) error); ok {
		r0 = rf(ctx, dbTrx, wallet, nonZeroVal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByID provides a mock function with given fields: ctx, dbTrx, walletID
func (_m *WalletRepository) DeleteByID(ctx context.Context, dbTrx mysql.TrxObj, walletID int64) error {
	ret := _m.Called(ctx, dbTrx, walletID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, mysql.TrxObj, int64) error); ok {
		r0 = rf(ctx, dbTrx, walletID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, ID
func (_m *WalletRepository) GetByID(ctx context.Context, ID int64) (*entity.Wallet, error) {
	ret := _m.Called(ctx, ID)

	var r0 *entity.Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*entity.Wallet, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entity.Wallet); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Wallet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserID provides a mock function with given fields: ctx, ID
func (_m *WalletRepository) GetByUserID(ctx context.Context, ID int64) ([]*entity.Wallet, error) {
	ret := _m.Called(ctx, ID)

	var r0 []*entity.Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*entity.Wallet, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*entity.Wallet); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Wallet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LockByID provides a mock function with given fields: ctx, dbTrx, ID
func (_m *WalletRepository) LockByID(ctx context.Context, dbTrx mysql.TrxObj, ID int64) (*entity.Wallet, error) {
	ret := _m.Called(ctx, dbTrx, ID)

	var r0 *entity.Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, mysql.TrxObj, int64) (*entity.Wallet, error)); ok {
		return rf(ctx, dbTrx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, mysql.TrxObj, int64) *entity.Wallet); ok {
		r0 = rf(ctx, dbTrx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Wallet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, mysql.TrxObj, int64) error); ok {
		r1 = rf(ctx, dbTrx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, dbTrx, params, changes
func (_m *WalletRepository) Update(ctx context.Context, dbTrx mysql.TrxObj, params *entity.Wallet, changes *entity.Wallet) error {
	ret := _m.Called(ctx, dbTrx, params, changes)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, mysql.TrxObj, *entity.Wallet, *entity.Wallet) error); ok {
		r0 = rf(ctx, dbTrx, params, changes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewWalletRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewWalletRepository creates a new instance of WalletRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWalletRepository(t mockConstructorTestingTNewWalletRepository) *WalletRepository {
	mock := &WalletRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
