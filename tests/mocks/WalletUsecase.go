// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entity "github.com/rahmatrdn/go-skeleton/entity"
)

// WalletUsecase is an autogenerated mock type for the WalletUsecase type
type WalletUsecase struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, walletReq
func (_m *WalletUsecase) Create(ctx context.Context, walletReq *entity.WalletReq) (*entity.WalletResponse, error) {
	ret := _m.Called(ctx, walletReq)

	var r0 *entity.WalletResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.WalletReq) (*entity.WalletResponse, error)); ok {
		return rf(ctx, walletReq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.WalletReq) *entity.WalletResponse); ok {
		r0 = rf(ctx, walletReq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.WalletResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.WalletReq) error); ok {
		r1 = rf(ctx, walletReq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByID provides a mock function with given fields: ctx, walletID
func (_m *WalletUsecase) DeleteByID(ctx context.Context, walletID int64) error {
	ret := _m.Called(ctx, walletID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, walletID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, walletID
func (_m *WalletUsecase) GetByID(ctx context.Context, walletID int64) (*entity.WalletResponse, error) {
	ret := _m.Called(ctx, walletID)

	var r0 *entity.WalletResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*entity.WalletResponse, error)); ok {
		return rf(ctx, walletID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entity.WalletResponse); ok {
		r0 = rf(ctx, walletID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.WalletResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, walletID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserID provides a mock function with given fields: ctx, userID
func (_m *WalletUsecase) GetByUserID(ctx context.Context, userID int64) ([]*entity.WalletResponse, error) {
	ret := _m.Called(ctx, userID)

	var r0 []*entity.WalletResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*entity.WalletResponse, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*entity.WalletResponse); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.WalletResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateByID provides a mock function with given fields: ctx, walletReq
func (_m *WalletUsecase) UpdateByID(ctx context.Context, walletReq entity.WalletReq) error {
	ret := _m.Called(ctx, walletReq)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.WalletReq) error); ok {
		r0 = rf(ctx, walletReq)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewWalletUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewWalletUsecase creates a new instance of WalletUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWalletUsecase(t mockConstructorTestingTNewWalletUsecase) *WalletUsecase {
	mock := &WalletUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
