// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/rahmatrdn/go-skeleton/entity"
	mock "github.com/stretchr/testify/mock"
)

// TodoListUsecase is an autogenerated mock type for the TodoListUsecase type
type TodoListUsecase struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, todoListReq
func (_m *TodoListUsecase) Create(ctx context.Context, todoListReq *entity.TodoListReq) (*entity.TodoListResponse, error) {
	ret := _m.Called(ctx, todoListReq)

	var r0 *entity.TodoListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *entity.TodoListReq) *entity.TodoListResponse); ok {
		r0 = rf(ctx, todoListReq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.TodoListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *entity.TodoListReq) error); ok {
		r1 = rf(ctx, todoListReq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByID provides a mock function with given fields: ctx, todoListID
func (_m *TodoListUsecase) DeleteByID(ctx context.Context, todoListID int64) error {
	ret := _m.Called(ctx, todoListID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, todoListID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, walletID
func (_m *TodoListUsecase) GetByID(ctx context.Context, walletID int64) (*entity.TodoListResponse, error) {
	ret := _m.Called(ctx, walletID)

	var r0 *entity.TodoListResponse
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entity.TodoListResponse); ok {
		r0 = rf(ctx, walletID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.TodoListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, walletID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserID provides a mock function with given fields: ctx, userID
func (_m *TodoListUsecase) GetByUserID(ctx context.Context, userID int64) ([]*entity.TodoListResponse, error) {
	ret := _m.Called(ctx, userID)

	var r0 []*entity.TodoListResponse
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*entity.TodoListResponse); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.TodoListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateByID provides a mock function with given fields: ctx, todoListReq
func (_m *TodoListUsecase) UpdateByID(ctx context.Context, todoListReq *entity.TodoListReq) error {
	ret := _m.Called(ctx, todoListReq)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.TodoListReq) error); ok {
		r0 = rf(ctx, todoListReq)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTodoListUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewTodoListUsecase creates a new instance of TodoListUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTodoListUsecase(t mockConstructorTestingTNewTodoListUsecase) *TodoListUsecase {
	mock := &TodoListUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
